library("XML", lib.loc="D:/Program Files/R-3.0.1/library")
help(htmlTreeParse)
:10
1:10
1:10 > 3
any(1:10 > 3)
all(1:10 > 3)
all(1:10 > 0)
sum(T,F)
close(con)
help(split)
help(stringsplit)
help(strsplit)
strsplit(Roy)
strsplit("Roy")
strsplit("Roy","\\.")
x <- strsplit("Roy","\\.")
x
x[3]
x[[2]]
x <- strsplit("Roy","o")
x
x <- 1: 21
x
help(x)
help(cut)
cut(x, 3)
plot(x)
class(x)
x[1:10]
x
x
x <- cut(x, 3)
x
plot(x)
x <- rnorm(100)
x <- cut(x, 10)
plot(x)
x <- rnorm(1000)
x <- cut(x, 10)
plot(x)
con <- url("http://simplystatistics.tumblr.com/")
readLines(con)
help(readLines)
x ，- readLines(con, 150)
details(egs)
x <- readLines(con, 150)
dim(x)
simplyStats <- x
nchar(x)
nchar(x)[c(5, 45, 122)]
nchar(x)[c(2, 45, 122)]
close(con)
help(down.file)
help(download.file)
x ，- download.file("https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv")
x <- download.file("https://dl.dropbox.com/u/7710864/data/csv_hid/ss06hid.csv")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(biomaRt)
ensembl = useMart("ensembl")
listMarts()
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges")
library(IRanges)
browseVinettes
help(browseVinettes)
browseVignettes("IRanges")
IRanges(1, 2)
IRanges(1, 2, 10)
IRanges(1, 200, 10)
IRanges(1, 200)
IRanges(1\5, 10)
IRanges(5, 10)
help(shift)
ir <- IRanges(5, 10)
class(ir)
narrow(ir, end = 5)
ir
narrow(ir, strart = 2)
narrow(ir, start = 2)
help(narrow)
help(shift)
shift(ir)
ir
shift(ir, -2)
help(shift)
narrow(ir, start = 4)
help(flank)
flank(ir)
flank(ir, width = 3)
ir
plot(ir)
range(ir)
reduce(ir)
Grange
irange(5:10)
Irange(5:10)
Iranges(5:10)
Iranges(5, 10)
library(Iranges)
IRanges(5, 10)
library(IRanges)
ir <- IRanges(5, 10)
shitf(ir, start = 2)
shift(ir, end = 3)
shift(ir, start = 2)
shift(ir, end = 3)
narrow(ir, start = 2)
narrow(ir, end = 3)
flank(ir, width = 3)
flank(ir, width = 3, start = T)
flank(ir, width = 3, start = F)
flank(ir, width = 3, start = T, both = T)
flank(ir, width = 3, start = T, both = F)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
??BiocUpgrade
library(SpikeIn)
data(SpikeIn95)
spms <- pm(SpikeIn95)
spd <- pData(SpikeIn95)
boxplot(log2(spms), range = 0)
library(rafalib)
mypar(1, 2)
help(shist)
??shist
mypar(1, 1)
for (i in 1:10)
shist(log2(spms[, i]), unit = 0.1, col = i, add = T, lty = 1)
mypar(1,1)
for (i in 1:10)
shist(log2(spms[, i]), unit = 0.1, col = i, add = T, lty = 1)
siNames <- colnames(spd)
siNames <- siNames[which(spd[i, ]/spd[j, ] == 2)]
siNames
which(spd[i, ]/spd[j, ] == 2)]
which(spd[i, ]/spd[j, ] == 2)
i = 10
j = 9
siNames <- colnames(spd)
siNames <- siNames[which(spd[i, ]/spd[j, ] == 2)]
siNames
which(spd[i, ]/spd[j, ] == 2)
A = (log2(spms[, i] - log2(spms[, j])))/2
splot(A, M, ylim = c(-1.5, 1.5))
M = log2(spms[, i] - log2(spms[, j]))
A = (log2(spms[, i] - log2(spms[, j])))/2
splot(A, M, ylim = c(-1.5, 1.5))
M
A
splot(A, M, ylim = c(-1.5, 1.5))
help(splot)
plot(A, M, ylim = c(-1.5, 1.5))
splot(A, M, ylim = c(-1.5, 1.5))
splot(A, M, ylim = c(-1.5, 1.5), color = "red")
splot(A, M, ylim = c(-1.5, 1.5), col = "red")
splot(A, M, ylim = c(-1.5, 1.5))
dim(M)
length(M)
length(A)
splot
splot(A, M, ylim = c(-1.5, 1.5))
ggplot(aed(M, A)) + geom_point()
ggplot(aes(M, A)) + geom_point()
head(M)
head(A)
ggplot(aes(M, A)) + geom_point()
splot(A, M, ylim = c(-1.5, 1.5))
splot(A, M)
M = log2(spms[, i] - log2(spms[, j]))
A = (log2(spms[, i] - log2(spms[, j])))/2
splot(A, M)
log2(spms[, j])))/2
s
splot(A, M)
A = (log2(spms[, i] + log2(spms[, j])))/2
splot(A, M)
A = (log2(spms[, i]) + log2(spms[, j]))/2
splot(A, M)
splot(A, M, ylim = c(-1.5, 1.5))
# calculate difference as M
# calculate the 1/2 sume as A
M = log2(spms[, i]) - log2(spms[, j])
A = (log2(spms[, i]) + log2(spms[, j]))/2
splot(A, M, ylim = c(-1.5, 1.5))
# calculate difference as M
# calculate the 1/2 sume as A
M = log2(spms[, i]) - log2(spms[, j])
A = (log2(spms[, i]) + log2(spms[, j]))/2
splot(A, M)
splot(A, M, ylim = c(-1.5, 1.5))
spikeinIndex = which(probeNames(SpikeIn95) %in% siNanmes)
siNames <- colnames(spd)
siNames <- siNames[which(spd[i, ]/spd[j, ] == 2)]
spikeinIndex = which(probeNames(SpikeIn95) %in% siNanmes)
spikeinIndex = which(probeNames(SpikeIn95) %in% siNames)
spikeinIndex
head(M)
points(A[spikeinIndex], M[spikeinIndex], ylime = c(-4, 4),
bg =1, pch = 22)
o <- order(A)
head(A)
head(o)
a <- A[o]
m <- M[o]
round(seq(1, length(a), len = 5000))
ind <- round(seq(1, length(a), len = 5000))
a <- a[ind]; m <- m[ind]
help(round)
seq(1, 10, len = 1)
seq(1, 10, len = 100)
fit <- loess(m ~ a)
head(fish)
head(fit)
fit <- loess(m ~ a)
fit
bias <- predict(fit, newdata = data, frame(a = A))
a <- a[ind]; m <- m[ind]
fit <- loess(m ~ a)
bias <- predict(fit, newdata = data, frame(a = A))
help(predict)
A
length(A)
help(predict)
length(a)
lenth(A)
lenthg(A)
length(A)
bias <- predict(fit, newdata = data.frame(a = A))
nM <- M - bias
M
hist(M)
hist(M-bia)
hist(M-bias)
splot(A, M, ylim = c(-1.5, 1.5))
lines(a, fit$fitted, col = 2, lwd = 2)
fit
str(fit)
fit$fitted
length(a)
fit <- loess(m ~ a)
length(a)
fit$fitted
splot(A, M, ylim = c(-1.5, 1.5))
points(A[spikeinIndex], M[spikeinIndex], ylime = c(-4, 4),
bg =1, pch = 22)
splot(A, M, ylim = c(-1.5, 1.5))
points(A[spikeinIndex], M[spikeinIndex], ylim = c(-4, 4),
bg =1, pch = 22)
bias <- predict(fit, newdata = data.frame(a = A))
nM <- M - bias
lines(a, fit$fitted, col = 2, lwd = 2)
length(a)
length(m)
fit <- loess(m ~ a)
fitted
fit
str(fit)
fit$fitted
ind <- round(seq(1, length(a), len = 5000))
a <- a[ind]; m <- m[ind]
a
length(a)
head(a)
a
data(SpikeIn95)
spms <- pm(SpikeIn95)
spd <- pData(SpikeIn95)
i = 10
j = 9
siNames <- colnames(spd)
siNames <- siNames[which(spd[i, ]/spd[j, ] == 2)]
# calculate difference as M
# calculate the 1/2 sume as A
M = log2(spms[, i]) - log2(spms[, j])
A = (log2(spms[, i]) + log2(spms[, j]))/2
splot(A, M, ylim = c(-1.5, 1.5))
spikeinIndex = which(probeNames(SpikeIn95) %in% siNames)
# plot the spike poitns
points(A[spikeinIndex], M[spikeinIndex], ylime = c(-4, 4),
bg =1, pch = 22)
o <- order(A)
a <- A[o]
m <- M[o]
# create arithmetic progression based on the number of genes, set index
ind <- round(seq(1, length(a), len = 5000))
a <- a[ind]; m <- m[ind]
# notice there is trick here that using only 5000 dots to do the
# prediction and then apply back to the original data
fit <- loess(m ~ a)
bias <- predict(fit, newdata = data.frame(a = A))
nM <- M - bias
fit <- loess(m ~ a)
fit
str(fitted)
str(fit)
lines(a, fit$fitted, col = 2, lwd = 2)
splot(A, nM, ylim = c(-1.5, 1.5))
points(A[spikeinIndex], nM[spikeinIndex], ylim = c(-4, 4),
bg =1, pch = 22)
abline(h = 0, col = 2, lwd = 2)
library(preprocessCore)
nspms <- normalized.quantiles(spms)
nspms <- normalize.quantiles(spms)
dim(nspms)
head(nspms)
library(preprocessCore)
nspms <- normalize.quantiles(spms)
M = log2(spms[, i]) - log2(spms[, j])
A = (log2(spms[, i]) + log2(spms[, j]))/2
splot(A, M, ylim = c(-1.5, 1.5))
points(A[spikeinIndex], M[spikeinIndex], ylim = c(-4, 4),
bg =1, pch = 21)
M = log2(nspms[, i]) - log2(nspms[, j])
A = (log2(nspms[, i]) + log2(nspms[, j]))/2
splot(A, M, ylim = c(-1.5, 1.5))
points(A[spikeinIndex], M[spikeinIndex], ylim = c(-4, 4),
bg =1, pch = 21)
rpois(lamda = .5)
rpois(10000, lamda = .5)
rpois(10000, lambda = .5)
hist(rpois(10000, lambda = .5))
density(rpois(10000, lambda = .5))
hist(rpois(10000, lambda = .5))
hist(rpois(100000, lambda = .5))
hist(rpois(100000, lambda = .5))
hist(rpois(100000, lambda = .5))
hist(rpois(100000, lambda = .5))
hist(rpois(100000, lambda = .5))
hist(rpois(100000, lambda = .5))
hist(rpois(100000, lambda = .5))
set.seed92
set.seed(2)
set.seed92
hist(rpois(100000, lambda = .5))
hist(rbinom(5000000, 0.5))
with(data.need, plot(DT, Global_active_power))
warnings
warnings()
data.need
library(lubridate)
file.dir1 <- "D:/interest/coursera/exploratory data analysis/assignment 1/exdata-data-household_power_consumption"
file.dir2 <- "D:/interest/coursera/exploratory data analysis/assignment 1"
setwd(file.dir2)
data <- read.table(paste(file.dir1, "household_power_consumption.txt", sep = "/"),
header = T, sep = ";")
data$Date <- dmy(data$Date)
data.need <- subset(data, Date %in% list(ymd("2007-02-01"), ymd("2007-02-02")))
data.need$Global_active_power <-
as.numeric(as.character(data.need$Global_active_power))
data.need$DT <- paste(data.need$Date, data.need$Time, sep = ",")
data.need$DT <- ymd_hms(data.need$DT)
setwd(paste(file.dir2, "plots", sep = "/"))
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power))
dev.off()
setwd(paste(file.dir2, "plots", sep = "/"))
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "l"))
dev.off()
setwd(paste(file.dir2, "plots", sep = "/"))
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "l",
xlab = "Global Active Power(kilowatts)",
main = "Global Active Power"))
dev.off()
setwd(paste(file.dir2, "plots", sep = "/"))
png(filename = "plot2.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "l",
ylab = "Global Active Power(kilowatts)",
main = "Global Active Power"))
dev.off()
head(data.need)
setwd(paste(file.dir2, "plots", sep = "/"))
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "n"))
with(data.need, plot(DT, Sub_metering_1, type = "l", color = "red"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "n"))
with(data.need, plot(DT, Sub_metering_1, type = "l", color = "red"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "n"))
with(data.need, plot(DT, Sub_metering_1, type = "l", col = "red"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "n"))
dev.off()
with(data.need, plot(DT, Sub_metering_1)
)
with(data.need, plot(DT, Sub_metering_1, type = "l", col = "red"))
head(data.need)
with(data.need, plot(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, plot(DT, Sub_metering_2, type = "l", col = "red"))
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "n"))
with(data.need, point(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, point(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, point(DT, Sub_metering_3, type = "l", col = "blue"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Global_active_power, type = "n"))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Sub_metering_1, type = "n"))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Sub_metering_1, type = "n", xlab = ""))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
dev.off()
help(legend)
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Sub_metering_1, type = "n", xlab = ""))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
legend("topright", pch = 1, col = c("grey", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Sub_metering_1, type = "n", xlab = ""))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty=c(1, 1, 1) col = c("grey", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Sub_metering_1, type = "n", xlab = ""))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = c(1, 1, 1), col = c("grey", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
png(filename = "plot3.png",
width = 480, height = 480, units = "px", pointsize = 12)
with(data.need, plot(DT, Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering"))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = c(1, 1, 1), col = c("grey", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
mfrow
mfrow()
head(data.need)
str(Global_reactive_power)
str(data.need)
data.need$Global_active_power <-
as.numeric(as.character(data.need$Global_active_power))
data.need$Global_active_power <-
as.numeric(as.character(data.need$Global_active_power))
data.need$DT <- paste(data.need$Date, data.need$Time, sep = ",")
data.need$DT <- ymd_hms(data.need$DT)
setwd(paste(file.dir2, "plots", sep = "/"))
# create device and set 2x2
png(filename = "plot4.png",
width = 480, height = 480, units = "px", pointsize = 12)
par(mfrow = c(2, 2))
# fig 1
with(data.need, hist(as.numeric(as.character(Global_active_power)),
xlab = "Global Active Power(kilowatts)",
main = "Global Active Power",
col = "red"))
# fig 2
with(data.need, plot(DT, Global_active_power, type = "l",
ylab = "Global Active Power(kilowatts)",
main = "Global Active Power"))
# fig 3
with(data.need, plot(DT, Sub_metering_1, type = "n",
xlab = "", ylab = "Energy sub metering"))
with(data.need, points(DT, Sub_metering_1, type = "l", col = "grey"))
with(data.need, points(DT, Sub_metering_2, type = "l", col = "red"))
with(data.need, points(DT, Sub_metering_3, type = "l", col = "blue"))
legend("topright", lty = c(1, 1, 1), col = c("grey", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# fig 4
with(data.need, plot(DT, Global_reactive_power, type = "l",
xlab = "datetime"))
dev.off()
